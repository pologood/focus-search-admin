<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <description>Spring公共配置</description>
    <context:annotation-config/>
    <context:component-scan base-package="cn.focus.search.*">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<import resource="applicationContext-redis.xml"/>
    
    <!-- production环境 -->
    <beans profile="product">
        <context:property-placeholder ignore-unresolvable="true" location="classpath*:/config/product.properties"/>
        <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath*:config/product.properties</value>
                </list>
            </property>
        </bean>
    </beans>

    <!-- local development环境 -->
    <beans profile="local">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/config/local.properties"/>
        <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath*:config/local.properties</value>
                </list>
            </property>
        </bean>
    </beans>

    <!-- sce test环境 -->
    <beans profile="test_sce">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/config/test_sce.properties"/>
        <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath*:config/test_sce.properties</value>
                </list>
            </property>
        </bean>
    </beans>

    <!-- 以下是profiles共用的bean定义-->
     <beans profile="test_sce,local,product">
         <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
             <property name="properties" ref="configProperties"/>
         </bean>
         <!-- 配置dbcp数据源 -->
         <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
             <property name="driverClassName" value="${jdbc.driverClassName}"/>
             <property name="url" value="${jdbc.url}"/>
             <property name="username" value="${jdbc.username}"/>
             <property name="password" value="${jdbc.password}"/>
             <!-- 队列中的最小等待数 -->
             <property name="minIdle" value="${jdbc.minIdle}"/>
             <!-- 队列中的最大等待数 -->
             <property name="maxIdle" value="${jdbc.maxIdle}"/>
             <!-- 最长等待时间，单位毫秒 -->
             <property name="maxWait" value="${jdbc.maxWait}"/>
             <!-- 最大活跃数 -->
             <property name="maxActive" value="${jdbc.maxActive}"/>
             <!--初始大小 -->
             <property name="initialSize" value="${jdbc.initialSize}"/>
         </bean>

         <!-- 使用JDBC事物 -->
         <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
             <property name="dataSource" ref="dataSource"/>
         </bean>

         <!-- 使用annotation注解方式配置事务 -->
      <!--    <tx:annotation-driven transaction-manager="transactionManager"/> -->

         <!-- AOP 配置事务的传播特性 -->
<!--          <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
             <tx:attributes>
                 <tx:method name="query*" read-only="true"/>
                 <tx:method name="get*" read-only="true" />
                 <tx:method name="select*" read-only="true" />
                 <tx:method name="*"  propagation="REQUIRED"/>
                 <tx:method name="delete*" propagation="REQUIRED"/>
                 <tx:method name="update*" propagation="REQUIRED"/>
                 <tx:method name="insert*" propagation="REQUIRED"/>
                 <tx:method name="modify*" propagation="REQUIRED"/>
                 <tx:method name="create*" propagation="REQUIRED"/>
             </tx:attributes>
         </tx:advice> -->

         <!-- 配置AOP切面含义:第一个* 代表任意返回值
           cn.focus.search.news.services包及其子包下所有类的所有()方法
           注意，如果事务处理加到那个层中，异常必需throws 出来，不能try cacth,不然事务不起使用；
           一条sql是一个原子操作，如果一个方法中只有一条sql,没有必要用事务，如果一个方法里有多个sql就需要事务统一
           成功，统一失败（必需把异常throws出去）弄了好久才想起来！
         -->
<!--          <aop:config>
             <aop:pointcut id="transactionPointcut" expression="execution(* cn.focus.rec.services..*(..))"/>
             <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
         </aop:config> -->


         <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
             <property name="dataSource" ref="dataSource"/>
             <property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
         </bean>

         <!-- 配置SQLSession模板 如果想使用直接注入到dao -->
         <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
             <constructor-arg index="0" ref="sqlSessionFactory"/>
         </bean>
         
        <!-- es 1.3.4 client-->
        <bean id="jestClient" class="cn.focus.search.admin.es.ESJestClient">
            <property name="urls">
                <util:set>
                    <!--10.10.26.23：9200是焦点独立的ES集群 -->
                    <value>http://es.search.focus.cn:9200</value>
                   <!--  <value>http://10.10.24.179:9200</value> -->
                    <!-- <value>http://10.0.68.137:9200</value> -->
                    <!-- SCE 为焦点申请的ES集群(es-version:1.3.4) -->
                    <!--<value>http://10.16.16.5:9210</value>-->
                </util:set>
            </property>
        </bean>
     </beans>
     
     <beans>
		<bean id="restTemplate" class="org.springframework.web.client.RestTemplate ">
		</bean>
	</beans>
     
</beans>